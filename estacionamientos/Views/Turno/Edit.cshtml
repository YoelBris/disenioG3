@model estacionamientos.Models.Turno
@{
    ViewData["Title"] = "Cerrar turno";
    var esPlayero = User.IsInRole("Playero");
    DateTime nowLocal = ViewBag.NowLocal != null ? (DateTime)ViewBag.NowLocal : DateTime.Now;
    decimal esperado = ViewBag.EfectivoEsperado != null ? (decimal)ViewBag.EfectivoEsperado : 0m;
}

<div class="container py-3" style="max-width: 720px">
    <h3 class="mb-3">Cerrar turno</h3>

    <form asp-action="Edit" method="post">
        @Html.AntiForgeryToken()
        <input type="hidden" asp-for="PlyID" />
        <input type="hidden" asp-for="PlaNU" />
        <input type="hidden" asp-for="TurFyhIni" />

        <div class="mb-3">
            <label class="form-label">Playa</label>
            <input type="text" class="form-control" value="@(Model.Playa?.PlyNom ?? ("Playa " + Model.PlyID))" disabled />
        </div>

        <div class="row">
            <div class="col-md-6 mb-3">
                <label class="form-label">Inicio</label>
                <input type="text" class="form-control"
                       value="@Model.TurFyhIni.ToLocalTime().ToString("dd/MM/yyyy HH:mm")" disabled />
            </div>
            <div class="col-md-6 mb-3">
                <label class="form-label">Fin</label>
                <input type="text" class="form-control"
                       value="@nowLocal.ToString("dd/MM/yyyy HH:mm")" disabled />
                <div class="form-text">Se registrará automáticamente al guardar.</div>
            </div>
        </div>

        <div class="row">
            <div class="col-md-6 mb-3">
                <label class="form-label">Apertura de caja</label>
                <input class="form-control" value="@((Model.TurApertCaja ?? 0m).ToString("N2"))" disabled />
            </div>
            <div class="col-md-6 mb-3">
                <label class="form-label">Cierre de caja</label>
                <input asp-for="TurCierrCaja" id="TurCierrCaja" class="form-control" type="number" step="0.01" min="0" inputmode="decimal" value="0" required />
                
                <div class="mt-2">
                    <small class="text-muted">Esperado (sistema): 
                        <span id="esperadoTexto">@esperado.ToString("N2")</span>
                    </small><br />
                    <small class="text-muted">Diferencia: 
                        <span id="diferencia">0.00</span>
                    </small>
                </div>
            </div>
        </div>

        <div class="d-flex gap-2">
            <button class="btn btn-primary" type="submit">Guardar</button>
            <a class="btn btn-secondary" asp-action="Index">Cancelar</a>
        </div>
    </form>
</div>

@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const inputCierre = document.getElementById("TurCierrCaja");
            // Parsear correctamente el formato: detectar si usa punto o coma como decimal
            const esperadoText = document.getElementById("esperadoTexto").innerText;
            console.log("Texto esperado:", esperadoText);
            
            let esperado = 0;
            // Si el último punto/coma está seguido de exactamente 2 dígitos, es el separador decimal
            const ultimoPunto = esperadoText.lastIndexOf('.');
            const ultimaComa = esperadoText.lastIndexOf(',');
            
            if (ultimoPunto > ultimaComa && ultimoPunto === esperadoText.length - 3) {
                // Formato: 46,026.61 (punto como decimal)
                esperado = parseFloat(esperadoText.replace(/,/g, ""));
            } else if (ultimaComa > ultimoPunto && ultimaComa === esperadoText.length - 3) {
                // Formato: 46.026,61 (coma como decimal)
                esperado = parseFloat(esperadoText.replace(/\./g, "").replace(",", "."));
            } else {
                // Sin decimales o formato ambiguo
                esperado = parseFloat(esperadoText.replace(/[,.]/g, ""));
            }
            
            console.log("Valor esperado parseado:", esperado);
            const diferenciaSpan = document.getElementById("diferencia");

            function actualizarDiferencia() {
                const declarado = parseFloat(inputCierre.value) || 0;
                const dif = esperado - declarado;

                diferenciaSpan.innerText = dif.toLocaleString("es-AR", { style: "currency", currency: "ARS" });

                if (dif === 0) {
                    diferenciaSpan.style.color = "gray";
                } else if (dif > 0) {
                    diferenciaSpan.style.color = "red";
                } else {
                    diferenciaSpan.style.color = "green";
                }
            }

            // Inicializar mostrando el valor esperado como diferencia inicial
            diferenciaSpan.innerText = esperado.toLocaleString("es-AR", { style: "currency", currency: "ARS" });
            diferenciaSpan.style.color = esperado === 0 ? "gray" : "red";

            inputCierre.addEventListener("input", actualizarDiferencia);
        });
    </script>
}
