@model estacionamientos.Models.PlayaEstacionamiento

@{
    ViewData["Title"] = "Alta estacionamiento";
}

<div class="container py-4" style="max-width: 760px">
    <h2 class="text-center mb-4">Registrar playa</h2>

    <form asp-action="Create" method="post" class="needs-validation" novalidate id="formCreate">
        @Html.AntiForgeryToken()
        <div asp-validation-summary="ModelOnly" class="text-danger mb-3"></div>

        <!-- Nombre -->
        <div class="mb-3">
            <label asp-for="PlyNom" class="form-label">Nombre</label>
            <input asp-for="PlyNom" class="form-control" id="nombreInput" autocomplete="off" required />
            <span asp-validation-for="PlyNom" class="text-danger"></span>
        </div>

        <!-- Provincia (editable) -->
        <div class="mb-3">
            <label asp-for="PlyProv" class="form-label">Provincia</label>
            <input asp-for="PlyProv" class="form-control" id="provinciaInput" required 
                               placeholder="Cargando..."/>
            <input type="hidden" asp-for="PlyProvId" id="provIdHidden" />
            <span asp-validation-for="PlyProv" class="text-danger"></span>
        </div>

        <!-- Ciudad/Localidad (editable) -->
        <div class="mb-3">
            <label asp-for="PlyCiu" class="form-label">Ciudad / Localidad</label>
            <input asp-for="PlyCiu" class="form-control" id="ciudadInput" required 
                               placeholder="Cargando..."/>
            <input type="hidden" asp-for="PlyCiuId" id="ciuIdHidden" />
            <span asp-validation-for="PlyCiu" class="text-danger"></span>
        </div>

        <!-- Dirección (EDITABLE: NO modifica el mapa) -->
        <div class="mb-3" style="position: relative;">
            <label asp-for="PlyDir" class="form-label">Dirección</label>
            <input asp-for="PlyDir" class="form-control" id="direccionInput" autocomplete="off" required
                   placeholder="Cargando..." />
            <span asp-validation-for="PlyDir" class="text-danger"></span>
            <!-- Sugerencias de direcciones -->
            <div id="addrSuggestions" class="list-group" style="position:absolute; top:100%; left:0; right:0; z-index:1000; max-height: 240px; overflow:auto; display:none;"></div>
        </div>

        <!-- Mapa -->
        <div class="mb-3">
            <div id="map" style="height: 360px; border-radius: 12px; border: 1px solid #ddd; overflow:hidden;"></div>
            <input type="hidden" asp-for="PlyLat" id="latHidden" />
            <input type="hidden" asp-for="PlyLon" id="lonHidden" />
            <div class="form-text">Hacé clic en el mapa o arrastrá el marcador para elegir la ubicación.</div>
        </div>

        <!-- Tipo de piso (requerido) -->
        <div class="mb-3">
            <label asp-for="PlyTipoPiso" class="form-label">Tipo de piso</label>
            <select asp-for="PlyTipoPiso" class="form-select mb-2" id="pisoSelect" required>
                <option value="">-- Selecciona una opción --</option>
                <option value="Asfalto">Asfalto</option>
                <option value="Ripio">Ripio</option>
                <option value="Tierra">Tierra</option>
            </select>
            <span asp-validation-for="PlyTipoPiso" class="text-danger"></span>
        </div>


        <!-- Llave requerida -->
        <div class="mb-3">
            <label class="form-label d-block">Llave requerida</label>
            <div class="btn-group" role="group">
                <input type="radio" class="btn-check" name="PlyLlavReq" id="llaveSi" value="true">
                <label class="btn btn-outline-success" for="llaveSi">Sí</label>
                <input type="radio" class="btn-check" name="PlyLlavReq" id="llaveNo" value="false" checked>
                <label class="btn btn-outline-danger" for="llaveNo">No</label>
            </div>
            <span asp-validation-for="PlyLlavReq" class="text-danger"></span>
        </div>

        <button type="submit" class="btn btn-primary w-100">Guardar</button>
    </form>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />

    <!-- Leaflet -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>

    <script>
        const $ = (id) => document.getElementById(id);
        const provinciaInput = $("provinciaInput");
        const ciudadInput    = $("ciudadInput");
        const direccionInput = $("direccionInput");
        const provIdHidden   = $("provIdHidden");
        const ciuIdHidden    = $("ciuIdHidden");
        const latHidden      = $("latHidden");
        const lonHidden      = $("lonHidden");

        // UTN FRRe (fallback) - Resistencia, Chaco
        const FALLBACK = { lat: -27.451000, lon: -58.986000, zoom: 14 };

        // Decimales con coma (para bindear decimal es-AR)
        function setLatLon(lat, lon) {
            const fmt = (n) => Number(n).toLocaleString('es-AR', { useGrouping: false, maximumFractionDigits: 6 });
            latHidden.value = fmt(lat);
            lonHidden.value = fmt(lon);
        }
        const debounce = (fn, wait = 600) => { let t; return (...a) => { clearTimeout(t); t = setTimeout(() => fn(...a), wait); }; };

        // --- Mapa con tema (CartoDB Positron) ---
        const map = L.map("map", { zoomControl: false });
        map.setView([FALLBACK.lat, FALLBACK.lon], 5);
        L.tileLayer("https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png", {
            attribution: '&copy; OpenStreetMap & CARTO'
        }).addTo(map);
        L.control.zoom({ position: 'topright' }).addTo(map);
        L.control.scale({ imperial: false }).addTo(map);

        let marker = L.marker([FALLBACK.lat, FALLBACK.lon], { draggable: true }).addTo(map);

        // --- Reverse geocoding (mapa -> provincia/ciudad IDs + dirección) ---
        let isEditingProv = false;
        let isEditingCity = false;

        const reverseFromMap = debounce(async (lat, lon) => {
            // 1) Provincia / Municipio / Departamento con georef (con IDs)
            try {
                const r = await fetch(`https://apis.datos.gob.ar/georef/api/ubicacion?lat=${lat}&lon=${lon}`);
                const d = await r.json();

                const prov = d?.ubicacion?.provincia || {};
                const muni = d?.ubicacion?.municipio || {};
                const dept = d?.ubicacion?.departamento || {};

                if (!isEditingProv) provinciaInput.value = prov.nombre || "";
                provIdHidden.value   = prov.id     || "";

                const cityName = muni.nombre || dept.nombre || "";
                const cityId   = muni.id     || dept.id     || "";
                if (!isEditingCity) ciudadInput.value = cityName;
                ciuIdHidden.value = cityId;
            } catch { /* noop */ }

            // 2) Dirección con Nominatim
            try {
                const rN = await fetch(
                    `https://nominatim.openstreetmap.org/reverse?format=jsonv2&lat=${lat}&lon=${lon}&addressdetails=1`,
                    { headers: { "Accept-Language": "es" } }
                );
                const j = await rN.json();
                const a = j.address || {};
                const road   = a.road || a.pedestrian || a.footway || a.path || a.cycleway;
                const house  = a.house_number;
                const suburb = a.suburb || a.neighbourhood || a.village || a.hamlet;

                const parts = [];
                if (road && house) parts.push(`${road} ${house}`); else if (road) parts.push(road);
                if (suburb) parts.push(suburb);
                const built = parts.join(", ");
                if (built) {
                    if (!direccionInput.matches(':focus')) direccionInput.value = built;
                } else if (j.display_name) {
                    if (!direccionInput.matches(':focus')) direccionInput.value = j.display_name.split(",").slice(0, 3).join(", ").trim();
                }
            } catch { /* noop */ }
        }, 600);

        // Eventos mapa/marker
        marker.on("dragend", () => {
            const { lat, lng } = marker.getLatLng();
            setLatLon(lat, lng);
            reverseFromMap(lat, lng);
        });
        map.on("click", (e) => {
            marker.setLatLng(e.latlng);
            setLatLon(e.latlng.lat, e.latlng.lng);
            reverseFromMap(e.latlng.lat, e.latlng.lng);
        });

        // Geolocalización del usuario → si falla, fallback UTN FRRe
        function initPosition(lat, lon, zoom = 16) {
            map.setView([lat, lon], zoom);
            marker.setLatLng([lat, lon]);
            setLatLon(lat, lon);
            reverseFromMap(lat, lon);
        }
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(
                (pos) => initPosition(pos.coords.latitude, pos.coords.longitude, 16),
                ()    => initPosition(FALLBACK.lat, FALLBACK.lon, FALLBACK.zoom),
                { enableHighAccuracy: true, timeout: 5000, maximumAge: 0 }
            );
        } else {
            initPosition(FALLBACK.lat, FALLBACK.lon, FALLBACK.zoom);
        }

        // Validación: obligar a elegir en el mapa / completar datos
        document.getElementById("formCreate").addEventListener("submit", (ev) => {
            const hasCoords = latHidden.value.trim() !== "" && lonHidden.value.trim() !== "";
            const hasProv   = provinciaInput.value.trim() !== "";
            const hasCity   = ciudadInput.value.trim() !== "";
            const hasAddr   = direccionInput.value.trim() !== "";
            if (!hasCoords || !hasProv || !hasCity || !hasAddr) {
                ev.preventDefault();
                ev.stopPropagation();
                alert("Elegí la ubicación en el mapa y completá la dirección.");
            }
        });

        const pisoSelect = $("pisoSelect");
        // Validación básica extra por si el navegador no aplica required
        pisoSelect.addEventListener("change", () => {
            if (!pisoSelect.value) pisoSelect.setCustomValidity("Seleccioná un tipo de piso");
            else pisoSelect.setCustomValidity("");
        });

        // ========= FORWARD GEOCODING: dirección -> mapa =========
        const addrSuggestions = $("addrSuggestions");
        let suggIndex = -1; // para navegación con teclado
        let lastSuggestions = [];

        function hideSuggestions() {
            addrSuggestions.style.display = "none";
            addrSuggestions.innerHTML = "";
            suggIndex = -1;
            lastSuggestions = [];
        }

        function renderSuggestions(items) {
            addrSuggestions.innerHTML = "";
            items.forEach((it, idx) => {
                const el = document.createElement("button");
                el.type = "button";
                el.className = "list-group-item list-group-item-action" + (idx === suggIndex ? " active" : "");
                el.textContent = it.label;
                el.addEventListener("click", () => applySuggestion(idx));
                addrSuggestions.appendChild(el);
            });
            addrSuggestions.style.display = items.length ? "block" : "none";
        }

        function applySuggestion(index) {
            const it = lastSuggestions[index];
            if (!it) return;
            direccionInput.value = it.label;
            hideSuggestions();
            initPosition(it.lat, it.lon, 17);
            reverseFromMap(it.lat, it.lon);
        }

        const forwardFromAddress = debounce(async () => {
            const addr = (direccionInput.value || "").trim();
            if (addr.length < 5) return; // evitar consultas demasiado cortas

            // Dar contexto (ciudad/provincia) si ya están presentes
            const ctxCity = (ciudadInput.value || "").trim();
            const ctxProv = (provinciaInput.value || "").trim();
            const q = [addr, ctxCity, ctxProv].filter(Boolean).join(", ");

            try {
                const url = `https://nominatim.openstreetmap.org/search?format=jsonv2&limit=5&addressdetails=1&q=${encodeURIComponent(q)}`;
                const res = await fetch(url, { headers: { "Accept-Language": "es" } });
                const arr = await res.json();
                if (!Array.isArray(arr) || arr.length === 0) { hideSuggestions(); return; }
                lastSuggestions = arr.map(it => ({
                    label: it.display_name,
                    lat: parseFloat(it.lat),
                    lon: parseFloat(it.lon)
                })).filter(it => Number.isFinite(it.lat) && Number.isFinite(it.lon));
                suggIndex = -1;
                renderSuggestions(lastSuggestions);
            } catch {
                hideSuggestions();
            }
        }, 800);

        direccionInput.addEventListener("input", forwardFromAddress);
        direccionInput.addEventListener("blur", forwardFromAddress);

        // Cambio de provincia/ciudad: buscar con prioridad en esa zona
        const forwardFromRegion = debounce(async () => {
            const addr = (direccionInput.value || "").trim();
            const ctxCity = (ciudadInput.value || "").trim();
            const ctxProv = (provinciaInput.value || "").trim();
            const q = [addr, ctxCity, ctxProv].filter(Boolean).join(", ");
            if (!q) return;
            try {
                const url = `https://nominatim.openstreetmap.org/search?format=jsonv2&limit=1&addressdetails=1&q=${encodeURIComponent(q)}`;
                const res = await fetch(url, { headers: { "Accept-Language": "es" } });
                const arr = await res.json();
                if (!Array.isArray(arr) || arr.length === 0) return;
                const best = arr[0];
                const lat = parseFloat(best.lat);
                const lon = parseFloat(best.lon);
                if (Number.isFinite(lat) && Number.isFinite(lon)) {
                    initPosition(lat, lon, 12);
                    reverseFromMap(lat, lon);
                }
            } catch { /* noop */ }
        }, 700);

        provinciaInput.addEventListener('focus', () => { isEditingProv = true; });
        provinciaInput.addEventListener('blur',  () => { isEditingProv = false; forwardFromRegion(); });
        provinciaInput.addEventListener('input', () => { isEditingProv = true; });

        ciudadInput.addEventListener('focus', () => { isEditingCity = true; });
        ciudadInput.addEventListener('blur',  () => { isEditingCity = false; forwardFromRegion(); });
        ciudadInput.addEventListener('input', () => { isEditingCity = true; });

        // Navegación por teclado en sugerencias
        direccionInput.addEventListener("keydown", (ev) => {
            if (addrSuggestions.style.display !== "block") return;
            const max = lastSuggestions.length - 1;
            if (ev.key === "ArrowDown") {
                ev.preventDefault();
                suggIndex = Math.min(max, suggIndex + 1);
                renderSuggestions(lastSuggestions);
            } else if (ev.key === "ArrowUp") {
                ev.preventDefault();
                suggIndex = Math.max(0, suggIndex - 1);
                renderSuggestions(lastSuggestions);
            } else if (ev.key === "Enter") {
                if (suggIndex >= 0) {
                    ev.preventDefault();
                    applySuggestion(suggIndex);
                }
            } else if (ev.key === "Escape") {
                hideSuggestions();
            }
        });

        // Cerrar al hacer clic fuera
        document.addEventListener("click", (e) => {
            if (!addrSuggestions.contains(e.target) && e.target !== direccionInput) {
                hideSuggestions();
            }
        });

    </script>
}
