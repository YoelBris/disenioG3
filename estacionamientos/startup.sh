#!/bin/bash

echo "üöÄ Iniciando aplicaci√≥n con reset autom√°tico de base de datos..."

# Verificar si el reset est√° habilitado (por defecto: s√≠)
RESET_DB=${RESET_DATABASE:-"true"}
echo "üîß Reset de base de datos: $RESET_DB"

# Funci√≥n para resetear la base de datos
reset_database() {
    echo "üóëÔ∏è  Reseteando base de datos..."
    
    # Eliminar todas las tablas (excepto las de sistema)
    echo "DROP SCHEMA public CASCADE; CREATE SCHEMA public;" | PGPASSWORD="$DB_PASSWORD" psql -h "$DB_HOST" -p "$DB_PORT" -U "$DB_USER" -d "$DB_NAME"
    
    echo "‚úÖ Base de datos reseteada exitosamente"
}

# Funci√≥n para aplicar migraciones
apply_migrations() {
    echo "üìä Aplicando migraciones..."
    
    # Crear la tabla de historial de migraciones si no existe
    echo "CREATE TABLE IF NOT EXISTS \"__EFMigrationsHistory\" (
        \"MigrationId\" character varying(150) NOT NULL,
        \"ProductVersion\" character varying(32) NOT NULL,
        CONSTRAINT \"PK___EFMigrationsHistory\" PRIMARY KEY (\"MigrationId\")
    );" | PGPASSWORD="$DB_PASSWORD" psql -h "$DB_HOST" -p "$DB_PORT" -U "$DB_USER" -d "$DB_NAME"
    
    # Aplicar migraciones usando Entity Framework
    dotnet ef database update --no-build --verbose || {
        echo "‚ö†Ô∏è  Error aplicando migraciones con EF, intentando m√©todo alternativo..."
        
        # M√©todo alternativo: ejecutar SQL directamente desde la migraci√≥n
        echo "Ejecutando migraci√≥n manualmente..."
        
        # Crear todas las tablas seg√∫n el modelo
        cat << 'EOF' | PGPASSWORD="$DB_PASSWORD" psql -h "$DB_HOST" -p "$DB_PORT" -U "$DB_USER" -d "$DB_NAME"
-- Crear tabla ClasificacionDias
CREATE TABLE IF NOT EXISTS "ClasificacionDias" (
    "ClaDiasID" integer GENERATED BY DEFAULT AS IDENTITY,
    "ClaDiasTipo" character varying(40) NOT NULL,
    "ClaDiasDesc" character varying(200),
    CONSTRAINT "PK_ClasificacionDias" PRIMARY KEY ("ClaDiasID")
);

-- Crear tabla ClasificacionVehiculo
CREATE TABLE IF NOT EXISTS "ClasificacionVehiculo" (
    "ClasVehID" integer GENERATED BY DEFAULT AS IDENTITY,
    "ClasVehTipo" character varying(40) NOT NULL,
    "ClasVehDesc" character varying(200),
    CONSTRAINT "PK_ClasificacionVehiculo" PRIMARY KEY ("ClasVehID")
);

-- Crear tabla MetodoPago
CREATE TABLE IF NOT EXISTS "MetodoPago" (
    "MepID" integer GENERATED BY DEFAULT AS IDENTITY,
    "MepNom" character varying(40) NOT NULL,
    "MepDesc" character varying(200),
    CONSTRAINT "PK_MetodoPago" PRIMARY KEY ("MepID")
);

-- Crear tabla PlayaEstacionamiento
CREATE TABLE IF NOT EXISTS "PlayaEstacionamiento" (
    "PlyID" integer GENERATED BY DEFAULT AS IDENTITY,
    "PlyNom" character varying(50) NOT NULL,
    "PlyProv" character varying(50) NOT NULL,
    "PlyProvId" character varying(10),
    "PlyCiu" character varying(80) NOT NULL,
    "PlyCiuId" character varying(12),
    "PlyDir" character varying(120) NOT NULL,
    "PlyTipoPiso" character varying(30) NOT NULL,
    "PlyValProm" numeric(4,2) NOT NULL DEFAULT 0,
    "PlyLlavReq" boolean NOT NULL,
    "PlyLat" numeric,
    "PlyLon" numeric,
    CONSTRAINT "PK_PlayaEstacionamiento" PRIMARY KEY ("PlyID")
);

-- Crear tabla Servicio
CREATE TABLE IF NOT EXISTS "Servicio" (
    "SerID" integer GENERATED BY DEFAULT AS IDENTITY,
    "SerNom" character varying(80) NOT NULL,
    "SerTipo" character varying(40),
    "SerDesc" character varying(200),
    CONSTRAINT "PK_Servicio" PRIMARY KEY ("SerID")
);

-- Crear tabla Usuario
CREATE TABLE IF NOT EXISTS "Usuario" (
    "UsuNU" integer GENERATED BY DEFAULT AS IDENTITY,
    "UsuNyA" character varying(120) NOT NULL,
    "UsuEmail" character varying(254) NOT NULL,
    "UsuPswd" character varying(200) NOT NULL,
    "UsuNumTel" character varying(30),
    "UsuNomUsu" character varying(50) NOT NULL,
    CONSTRAINT "PK_Usuario" PRIMARY KEY ("UsuNU")
);

-- Crear tabla Vehiculo
CREATE TABLE IF NOT EXISTS "Vehiculo" (
    "VehPtnt" character varying(10) NOT NULL,
    "VehMarc" character varying(80) NOT NULL,
    "ClasVehID" integer NOT NULL,
    CONSTRAINT "PK_Vehiculo" PRIMARY KEY ("VehPtnt")
);

-- Crear tabla AceptaMetodoPago
CREATE TABLE IF NOT EXISTS "AceptaMetodoPago" (
    "PlyID" integer NOT NULL,
    "MepID" integer NOT NULL,
    "AmpHab" boolean NOT NULL DEFAULT true,
    CONSTRAINT "PK_AceptaMetodoPago" PRIMARY KEY ("PlyID", "MepID")
);

-- Crear tabla Horario
CREATE TABLE IF NOT EXISTS "Horario" (
    "PlyID" integer NOT NULL,
    "ClaDiasID" integer NOT NULL,
    "HorFyhIni" timestamp with time zone NOT NULL,
    "HorFyhFin" timestamp with time zone,
    CONSTRAINT "PK_Horario" PRIMARY KEY ("PlyID", "ClaDiasID", "HorFyhIni")
);

-- Crear tabla PlazaEstacionamiento
CREATE TABLE IF NOT EXISTS "PlazaEstacionamiento" (
    "PlyID" integer NOT NULL,
    "PlzNum" integer NOT NULL,
    "PlzOcupada" boolean NOT NULL,
    "PlzTecho" boolean NOT NULL,
    "PlzAlt" numeric(5,2),
    "PlzHab" boolean NOT NULL,
    "PlzNombre" character varying(80),
    "Piso" integer,
    CONSTRAINT "PK_PlazaEstacionamiento" PRIMARY KEY ("PlyID", "PlzNum")
);

-- Crear tabla ServicioProveido
CREATE TABLE IF NOT EXISTS "ServicioProveido" (
    "PlyID" integer NOT NULL,
    "SerID" integer NOT NULL,
    "SerProvHab" boolean NOT NULL DEFAULT true,
    CONSTRAINT "PK_ServicioProveido" PRIMARY KEY ("PlyID", "SerID")
);

-- Crear tabla Administrador
CREATE TABLE IF NOT EXISTS "Administrador" (
    "UsuNU" integer NOT NULL,
    CONSTRAINT "PK_Administrador" PRIMARY KEY ("UsuNU")
);

-- Crear tabla Conductor
CREATE TABLE IF NOT EXISTS "Conductor" (
    "UsuNU" integer NOT NULL,
    CONSTRAINT "PK_Conductor" PRIMARY KEY ("UsuNU")
);

-- Crear tabla Duenio
CREATE TABLE IF NOT EXISTS "Duenio" (
    "UsuNU" integer NOT NULL,
    "DueCuit" character varying(11) NOT NULL,
    CONSTRAINT "PK_Duenio" PRIMARY KEY ("UsuNU")
);

-- Crear tabla Playero
CREATE TABLE IF NOT EXISTS "Playero" (
    "UsuNU" integer NOT NULL,
    CONSTRAINT "PK_Playero" PRIMARY KEY ("UsuNU")
);

-- Crear tabla Pago
CREATE TABLE IF NOT EXISTS "Pago" (
    "PlyID" integer NOT NULL,
    "PagNum" integer NOT NULL,
    "MepID" integer NOT NULL,
    "PagMonto" numeric(12,2) NOT NULL,
    "PagFyh" timestamp with time zone NOT NULL,
    "AceptaMetodoPagoMepID" integer,
    "AceptaMetodoPagoPlyID" integer,
    CONSTRAINT "PK_Pago" PRIMARY KEY ("PlyID", "PagNum")
);

-- Crear tabla PlazaClasificacion
CREATE TABLE IF NOT EXISTS "PlazaClasificacion" (
    "PlyID" integer NOT NULL,
    "PlzNum" integer NOT NULL,
    "ClasVehID" integer NOT NULL,
    CONSTRAINT "PK_PlazaClasificacion" PRIMARY KEY ("PlyID", "PlzNum", "ClasVehID")
);

-- Crear tabla TarifaServicio
CREATE TABLE IF NOT EXISTS "TarifaServicio" (
    "PlyID" integer NOT NULL,
    "SerID" integer NOT NULL,
    "ClasVehID" integer NOT NULL,
    "TasFecIni" timestamp with time zone NOT NULL,
    "TasFecFin" timestamp with time zone,
    "TasMonto" numeric(12,2) NOT NULL,
    CONSTRAINT "PK_TarifaServicio" PRIMARY KEY ("PlyID", "SerID", "ClasVehID", "TasFecIni")
);

-- Crear tabla Abonado
CREATE TABLE IF NOT EXISTS "Abonado" (
    "AboDNI" character varying(15) NOT NULL,
    "AboNom" character varying(120) NOT NULL,
    "ConNU" integer,
    CONSTRAINT "PK_Abonado" PRIMARY KEY ("AboDNI")
);

-- Crear tabla Conduce
CREATE TABLE IF NOT EXISTS "Conduce" (
    "ConNU" integer NOT NULL,
    "VehPtnt" character varying(10) NOT NULL,
    CONSTRAINT "PK_Conduce" PRIMARY KEY ("ConNU", "VehPtnt")
);

-- Crear tabla UbicacionFavorita
CREATE TABLE IF NOT EXISTS "UbicacionFavorita" (
    "ConNU" integer NOT NULL,
    "UbfApodo" character varying(50) NOT NULL,
    "UbfProv" character varying(50) NOT NULL,
    "UbfCiu" character varying(80) NOT NULL,
    "UbfDir" character varying(120) NOT NULL,
    "UbfTipo" character varying(30),
    CONSTRAINT "PK_UbicacionFavorita" PRIMARY KEY ("ConNU", "UbfApodo")
);

-- Crear tabla Valoracion
CREATE TABLE IF NOT EXISTS "Valoracion" (
    "PlyID" integer NOT NULL,
    "ConNU" integer NOT NULL,
    "ValNumEst" integer NOT NULL,
    "ValFav" boolean NOT NULL,
    CONSTRAINT "PK_Valoracion" PRIMARY KEY ("PlyID", "ConNU")
);

-- Crear tabla AdministraPlaya
CREATE TABLE IF NOT EXISTS "AdministraPlaya" (
    "DueNU" integer NOT NULL,
    "PlyID" integer NOT NULL,
    CONSTRAINT "PK_AdministraPlaya" PRIMARY KEY ("DueNU", "PlyID")
);

-- Crear tabla TrabajaEn
CREATE TABLE IF NOT EXISTS "TrabajaEn" (
    "PlyID" integer NOT NULL,
    "PlaNU" integer NOT NULL,
    "FechaInicio" timestamptz NOT NULL,
    "TrabEnActual" boolean NOT NULL DEFAULT true,
    "FechaFin" timestamptz,
    CONSTRAINT "PK_TrabajaEn" PRIMARY KEY ("PlyID", "PlaNU", "FechaInicio")
);

-- Crear tabla Ocupacion
CREATE TABLE IF NOT EXISTS "Ocupacion" (
    "PlyID" integer NOT NULL,
    "PlzNum" integer NOT NULL,
    "VehPtnt" character varying(10) NOT NULL,
    "OcufFyhIni" timestamp with time zone NOT NULL,
    "OcufFyhFin" timestamp with time zone,
    "OcuLlavDej" boolean NOT NULL,
    "PagNum" integer,
    "PagoPagNum" integer,
    "PagoPlyID" integer,
    CONSTRAINT "PK_Ocupacion" PRIMARY KEY ("PlyID", "PlzNum", "VehPtnt", "OcufFyhIni")
);

-- Crear tabla ServicioExtraRealizado
CREATE TABLE IF NOT EXISTS "ServicioExtraRealizado" (
    "PlyID" integer NOT NULL,
    "SerID" integer NOT NULL,
    "VehPtnt" character varying(10) NOT NULL,
    "ServExFyHIni" timestamp with time zone NOT NULL,
    "ServExFyHFin" timestamp with time zone,
    "ServExComp" character varying(200),
    "PagNum" integer,
    "PagoPagNum" integer,
    "PagoPlyID" integer,
    CONSTRAINT "PK_ServicioExtraRealizado" PRIMARY KEY ("PlyID", "SerID", "VehPtnt", "ServExFyHIni")
);

-- Crear tabla Abono
CREATE TABLE IF NOT EXISTS "Abono" (
    "PlyID" integer NOT NULL,
    "PlzNum" integer NOT NULL,
    "AboFyhIni" timestamp with time zone NOT NULL,
    "AboFyhFin" timestamp with time zone,
    "AboDNI" character varying(15) NOT NULL,
    "PagNum" integer NOT NULL,
    CONSTRAINT "PK_Abono" PRIMARY KEY ("PlyID", "PlzNum", "AboFyhIni")
);

-- Crear tabla Turno
CREATE TABLE IF NOT EXISTS "Turno" (
    "PlyID" integer NOT NULL,
    "PlaNU" integer NOT NULL,
    "TurFyhIni" timestamptz NOT NULL,
    "TurFyhFin" timestamptz,
    "TrabFyhIni" timestamptz NOT NULL,
    "TurApertCaja" numeric(12,2),
    "TurCierrCaja" numeric(12,2),
    CONSTRAINT "PK_Turno" PRIMARY KEY ("PlyID", "PlaNU", "TurFyhIni")
);

-- Crear tabla VehiculoAbonado
CREATE TABLE IF NOT EXISTS "VehiculoAbonado" (
    "PlyID" integer NOT NULL,
    "PlzNum" integer NOT NULL,
    "AboFyhIni" timestamp with time zone NOT NULL,
    "VehPtnt" character varying(10) NOT NULL,
    CONSTRAINT "PK_VehiculoAbonado" PRIMARY KEY ("PlyID", "PlzNum", "AboFyhIni", "VehPtnt")
);

-- Insertar datos iniciales
INSERT INTO "ClasificacionDias" ("ClaDiasID", "ClaDiasDesc", "ClaDiasTipo") VALUES 
(1, 'Lunes a Viernes', 'H√°bil'),
(2, 'S√°bado y Domingo', 'Fin de semana'),
(3, 'Feriados no laborables', 'Feriado');

INSERT INTO "ClasificacionVehiculo" ("ClasVehID", "ClasVehDesc", "ClasVehTipo") VALUES 
(1, 'Veh√≠culo de pasajeros', 'Autom√≥vil'),
(2, 'Veh√≠culo utilitario', 'Camioneta'),
(3, 'Veh√≠culo de carga', 'Cami√≥n'),
(4, 'Veh√≠culo de dos ruedas', 'Motocicleta');

INSERT INTO "MetodoPago" ("MepID", "MepDesc", "MepNom") VALUES 
(1, 'Pago en efectivo', 'Efectivo'),
(2, 'Pago con tarjeta de cr√©dito', 'Tarjeta de cr√©dito'),
(3, 'Pago con tarjeta de d√©bito', 'Tarjeta de d√©bito'),
(4, 'Pago mediante transferencia bancaria', 'Transferencia bancaria');

INSERT INTO "Servicio" ("SerID", "SerDesc", "SerNom", "SerTipo") VALUES 
(1, 'Lavado exterior e interior del veh√≠culo', 'Lavado de veh√≠culo', 'ServicioExtra'),
(2, 'Revisi√≥n y mantenimiento mec√°nico del veh√≠culo', 'Mantenimiento de veh√≠culo', 'ServicioExtra'),
(3, 'Carga de combustible en el veh√≠culo', 'Carga de combustible', 'ServicioExtra'),
(4, 'Revisi√≥n t√©cnica del veh√≠culo para verificar su estado', 'Revisi√≥n t√©cnica', 'ServicioExtra'),
(5, 'Servicio de estacionamiento por 1 hora en playa', 'Estacionamiento por 1 hora', 'Estacionamiento'),
(6, 'Servicio de estacionamiento por 6 horas en playa', 'Estacionamiento por 6 horas', 'Estacionamiento'),
(7, 'Servicio de estacionamiento por 1 d√≠a en playa', 'Estacionamiento por 1 d√≠a', 'Estacionamiento'),
(8, 'Servicio de estacionamiento por 1 semana en playa', 'Estacionamiento por 1 semana', 'Estacionamiento'),
(9, 'Servicio de estacionamiento por 1 mes en playa', 'Estacionamiento por 1 mes', 'Estacionamiento');

INSERT INTO "Usuario" ("UsuNU", "UsuEmail", "UsuNomUsu", "UsuNumTel", "UsuNyA", "UsuPswd") VALUES 
(1, 'castromauricionicolas@hotmail.com', 'MauriCastro', '1234567890', 'Mauricio Nicol√°s Castro', '12345678'),
(2, 'brizuelajoelelian@gmail.com', 'YoelBrizuela', '0987654321', 'Yoel Brizuela Silvestri', '12345678'),
(3, 'nadineperaltaruiz@gmail.com', 'NadinePeralta', '1122334455', 'Nadine Andrea Peralta Ruiz', '12345678'),
(4, 'mateobeneyto@gmail.com', 'MateoBeneyto', '5566778899', 'Mateo Beneyto', '12345678'),
(5, 'ivan.nikcevich@hotmail.com', 'IvanNikcevich', '2233445566', 'Iv√°n Josu√© Nikcevich', '12345678'),
(6, 'adri.nikce30@gmail.com', 'AdrianoNikcevich', '6677889900', 'Adriano Nikcevich', '12345678'),
(7, 'solana.livio1976@gmail.com', 'SolanaLivio', '3344556677', 'Solana Livio', '12345678'),
(8, 'obregon.elias@gmail.com', 'EliasObregon', '7788990011', 'El√≠as Obreg√≥n', '12345678');

INSERT INTO "Administrador" ("UsuNU") VALUES (1), (2), (3), (4), (5), (6), (7), (8);

-- Marcar la migraci√≥n como aplicada
INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion") VALUES ('20250925124602_Migration_2025-09-25_09-45', '9.0.8');
EOF
        
        echo "‚úÖ Migraci√≥n aplicada manualmente"
    }
}

# Funci√≥n principal
main() {
    echo "üîß Configurando base de datos..."
    
    # Solo resetear si est√° habilitado
    if [ "$RESET_DB" = "true" ]; then
        reset_database
        apply_migrations
    else
        echo "‚è≠Ô∏è  Saltando reset de base de datos (RESET_DATABASE=false)"
        # Solo aplicar migraciones sin resetear
        echo "üìä Aplicando migraciones sin reset..."
        dotnet ef database update --no-build --verbose || echo "‚ö†Ô∏è  Error aplicando migraciones"
    fi
    
    echo "üöÄ Iniciando aplicaci√≥n..."
    
    # Ejecutar la aplicaci√≥n
    exec dotnet estacionamientos.dll
}

# Ejecutar funci√≥n principal
main "$@"
